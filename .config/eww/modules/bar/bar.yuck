;; waybar-lyric: https://github.com/Nadim147c/waybar-lyric
(deflisten lyrics :initial "{}" `waybar-lyric -qdm150 -b47 -fpartial`)
(defvar lyrics_icons `{ "playing": "", "paused": "", "lyric": "", "music": "󰝚" }`)

;; hyprland
(deflisten hyprland_ipc :initial "{}" `~/.config/eww/modules/bar/hyprland.go`)
;; network
(deflisten network :initial "{}" `~/.config/eww/modules/bar/network.go`)

(defvar spacing 16)

(defwidget hyprland []
    (box
        :class "workspaces"
        :orientation "h"
        :space-evenly true
        :halign "start"
        (for workspace in hyprland_ipc
            (eventbox :cursor "pointer"
                (button
                    :class {workspace.active ? "active-workspace" : "workspace"}
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    (label :text "${workspace.active ? "" : workspace.name }" :tooltip "${workspace.hover}")
                )
            )
        )
    )
)

(defvar player_position_show false)
(defwidget player []
    (tooltip
        :class "player"
        (box
            :class "card"
            :orientation "v"
            :valign "center"
            :halign "center"
            :space-evenly false
            :spacing 20
            :width 400
            (box
                :class "info"
                :orientation "h"
                :space-evenly false
                :halign "center"
                :spacing {spacing}
                (box :class "cover"
                    (image :height 100 :width 100
                        :style 'background-image: url("${lyrics.info.cover}"); background-size: cover')
                )
                (box
                    :orientation "v"
                    :valign "center"
                    :halign "start"
                    (label :class "title" :markup "<big>${lyrics.info.title}</big>")
                    (label :class "artist" :text {lyrics.info.artist})
                    (label :class "album" :text {lyrics.info.album})
                )
            )
            (label :class "lyrics" :justify "center" :markup "${lyrics.tooltip}")
        )
        (eventbox :cursor "pointer"
            (box
                :orientation "h"
                :spacing {spacing / 2}
                :space-evenly false
                (button
                    :class {lyrics.info.shuffle ? "shuffled" : "shuffle"}
                    :onclick "playerctl --player=${substring(lyrics.info.name, 23, 1000)} shuffle Toggle"
                    ""
                )
                (button
                    :class "previous"
                    :onclick "playerctl --player=${substring(lyrics.info.name, 23, 1000)} previous"
                    ""
                )
                (button
                    :class {lyrics?.info?.status == "Playing" ? "pause" : "play"}
                    :onclick "playerctl --player=${substring(lyrics.info.name, 23, 1000)} play-pause"
                    {lyrics?.info?.status == "Playing" ? "" : ""}
                )
                (button
                    :class "next"
                    :onclick "playerctl --player=${substring(lyrics.info.name, 23, 1000)} next"
                    ""
                )
                (eventbox
                    :class "position"
                    :onhover "${EWW_CMD} update player_position_show=true"
                    :onhoverlost "${EWW_CMD} update player_position_show=false"
                    (box
                        :space-evenly false
                        (button :class {player_position_show ? "seeking" :"seek"} "")
                        (revealer
                            :transition "slideleft"
                            :reveal player_position_show
                            :duration "400ms"
                            (scale :min 0 :max {lyrics.info.length / 1000000000} :value {lyrics.info.position / 1000000000} :width 150 :orientation "h"
                                :onchange `playerctl --player=${substring(lyrics.info.name, 23, 1000)} position {}`
                            )
                        )
                    )
                )
            )
        )
    )
)

(defwidget network []
    (button
        :class "network"
        (label
            :class "text"
            :text "${network.wireless ? " " : " "} ${network.change}"
            :tooltip "${network.table}"
        )
    )
)

(defvar volume_show false)
(defpoll volume_value :interval "2s" `~/.config/eww/modules/bar/audio.sh --volume`)
(defpoll volume_muted :interval "2s" `~/.config/eww/modules/bar/audio.sh --muted`)
(defwidget volume []
    (eventbox
        :class "volume"
        :cursor "pointer"
        :onhover "${EWW_CMD} update volume_show=true"
        :onhoverlost "${EWW_CMD} update volume_show=false"
        (box
            :orientation "h"
            :space-evenly false
            :spacing 0
            (revealer
                :transition "slideleft"
				:reveal volume_show
				:duration "400ms"
                (scale :min 0 :max 100 :value {volume_value} :width 100 :orientation "h"
                    :onchange `${EWW_CMD} update volume_value={} && wpctl set-volume @DEFAULT_SINK@ {}%`
                )
            )
            (button
                :onclick `wpctl set-mute @DEFAULT_SINK@ toggle && ${EWW_CMD} update volume_muted=$(~/.config/eww/modules/bar/audio.sh --muted) `
                "${volume_muted ? "" : ""}   ${volume_value}%"
            )
        )
    )
)

(defwidget clock []
    (box (label :text "  ${formattime(EWW_TIME, "%I:%M%p")}"))
)

(defvar power_show false)
(defwidget power []
    (eventbox
        :class "power"
        :onhover "${EWW_CMD} update power_show=true"
        :onhoverlost "${EWW_CMD} update power_show=false"
        (box
            :orientation "h"
            :space-evenly false
            :spacing 0
            (revealer
                :class "revealer"
                :transition "slideleft"
				:reveal power_show
				:duration "400ms"
                (box
                    :spacing {spacing}
                    (eventbox :cursor "pointer"
                        (button
                            :onclick `${EWW_CMD} open confirm --arg cancel=Cencel --arg okay=Lock --arg decs="Lock your current sesssion?" --arg callback="hyprctl dispatch exec -- hyprlock"`
                            (label :class "lock-button" :text "" :tooltip "Lock")
                        )
                    )
                    (eventbox :cursor "pointer"
                        (button
                            :onclick `${EWW_CMD} open confirm --arg cancel=Cencel --arg okay=Lockout --arg decs="Exit your current sesssion?" --arg callback="hyprctl dispatch exit"`
                            (label :class "logout-button" :text "󰍃" :tooltip "Logout")
                        )
                    )
                    (eventbox :cursor "pointer"
                        (button
                            :onclick `${EWW_CMD} open confirm --arg cancel=Cencel --arg okay=Sleep --arg decs="Sleep your computer?" --arg callback="systemctl suspend"`
                            (label :class "sleep-button" :text "󰒲" :tooltip "Sleep")
                        )
                    )
                    (eventbox :cursor "pointer"
                        (button
                            :onclick `${EWW_CMD} open confirm --arg cancel=Cencel --arg okay=Reboot --arg decs="Reboot your computer??" --arg callback="systemctl reboot"`
                            (label :class "reboot-button" :text "" :tooltip "Reboot")
                        )
                    )
                    (eventbox :cursor "pointer"
                        (button
                            :onclick `${EWW_CMD} open confirm --arg cancel=Cencel --arg okay=Shutdown --arg decs="Shutdown your computer??" --arg callback="systemctl poweroff"`
                            (label :class "power-button" :text "" :tooltip "Shutdown")
                        )
                    )
                )
            )
            (eventbox :cursor "pointer"
                (button :onclick "swaync-client --open-panel"
                    (label :class "menu-button" :text "󰇙" :tooltip "Control Center")
                )
            )
        )
    )
)


(defwidget left []
	(box
        :class "left"
        :orientation "h"
        :halign "start"
        :space-evenly false
        :spacing {spacing}
        (hyprland)
        (systray :class "systray" :spacing 5 :icon-size 17 :prepend-new true)
    )
)

(defwidget center []
	(box
        :class "center"
        :orientation "v"
        :spacing {spacing}
        :valign "center"
            (player)
    )
)

(defwidget right []
	(box
        :class "right"
        :orientation "h"
        :halign "end"
        :spacing {spacing}
        :space-evenly false
        (network)
        (volume)
        (clock)
        (power)
    )
)

(defwindow bar
    :monitor 0
    :stacking "bottom"
    :windowtype "dock"
    :wm-ignore false
    :exclusive true
	:geometry (geometry :x "0%" :y "0%" :height "35px" :width "100%" :anchor "center top")
    (centerbox
        :class "eww-bar"
        :orientation "h"
        (left)
        (center)
        (right)
    )
)
